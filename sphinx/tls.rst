.. paper1 documentation master file, created by
   sphinx-quickstart on Mon Feb 25 21:17:45 2019.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

liu18tafmec
==================================


This documentation explains the code for reproducing the results presented in:
  Liu, Y., van der Meer, F.P. and Sluys, L.J., 2018. Cohesive zone and interfacial thick level set modeling of the dynamic double cantilever beam test of composite laminate. Theoretical and Applied Fracture Mechanics, 96, pp.617-630.  [doi_]

.. _doi: https://doi.org/10.1016/j.tafmec.2018.07.004

This paper is divided into two parts. The first part is about using a rate-dependent cohesive zone model to simulate the dynamic double cantilever beam test of composite laminate at different test rates. The second part is about using interfacial thick-level-set approach to simulate the same series of tests as the cohesive zone modeling part. Therefore, two types of source codes are adopted, one for each part of the paper. The difference between this two types of source codes are mainly the implementation of **InterfaceModel** class.

Code
++++++++++++++++++++++++++
 The program for the computations is called **fem-opt** and is compiled and linked using the standard jemjive framework.  No external libraries are needed.
 
 
The jemjive code is located in ``./src_czm`` and ``./src_itls`` and consists of the following important files:

::

  AdaptiveStepModule.[cpp|h]
  DirichletModel.[cpp|h]
  GroupInputModule.[cpp|h]
  InterfaceModel.[cpp|h]
  MayCohesiveMat.[cpp|h]
  TlsCohesiveMat.[cpp|h]
  ContactCohesiveMat.[cpp|h]
  SetInitCondModel.[cpp|h]
  LoadDispModel.[cpp|h]
  SolidModel.[cpp|h]
  OrthotropicMaterial.[cpp|h]
  MatrixModel.cpp
  
To compile to code, in the terminal go to the source code folder (``./src_czm`` or ``./src_itls``) and  type ``make opt``. This generates the executable file. 


Mesh generation
+++++++++++++++++++++
The mesh for the bulk material is first generated by a gmsh file stored in ``./meshgen/dcb.geo`` and then passed to a interface generator to create the interface
elements embedded along the middle plane of the beam. These operations can be done by running ``./makeMesh``. For example, a typical mesh snapshot is shown in Fig. 1.

.. figure:: _static/dcb.png
   :align: center
   :width: 400 px

   Figure 1: Mesh refinement near the crack tip

CZM
+++++++++++++++++++++
To generate the time crack length curve in fig.3(a), you need the input files located at ``./inputs/czm/v33``. This folder contains the input files used to simulate the 
dynamic DCB test at a test rate of 3.3e-5 m/s and a post-processing file as well. As a typical example, the needed files include:

::

  interface.mesh (mesh file for interface)
  solid.mesh (mesh file for the bulk material)
  test.pro (property file)
  getCrackInfo.m (matlab file for plotting the crack length curve)
  
Type ``./src_czm/fem-opt test.pro`` to run the simulation and run ``getCrackInfo.m`` for post-processing.

The input files for the other three test rate cases (Fig. 3(b), (c), (d) of the paper) are stored in ``./inputs/czm/(v1|v65|v10)``. 

ITLS
+++++++++++++++++++++
The dynamic version of interfacial thick-level-set approach is presented in this part of work.

.. figure:: _static/itls.png
   :align: center
   :width: 800 px

   Figure 2: interfacial thick-level-set approach

Verification study
----------------------
To reproduce the results shown in Section 4.1 of the paper, you need the source code stored in ``./src_quasistatic``. This code has a slightly different implementation 
of the **InterfaceModel** class from ``./src_itls``. This is because for this problem the displacement is first increased to the point when the energy release rate has reached a critical 
value and then kept as a fixed value. Afterwards, the damage zone is forced to grow manually and the energy release rate is calculated as the return.

The input files of this study are stored in ``./inputs/itls/section_4_1`` and the post-processing files are ``./inputs/getTLScrackHist.m`` and ``./inputs/ischemestudy.m``. The functionality of the post-processing files is self-explanary.


Parameter&Calibration
-------------------------
Section 4.2 and 4.3 of the paper talk about the calibration of V(G) relation against experimentally measured crack length growth curve. Therefore, the simulation runs in 
similar manners except the parameter values have to be changed for each simulation. 
Therefore, by first compile the source code in ``./src_itls`` to generate the execulatable
file and then provide the needed input property file, ``test.pro``, to the program the simulation can be done.

The input files for test rate 6.5 m/s and 10.0 m/s are given in ``./inputs/itls/section4_2_3/v65`` and ``./inputs/itls/section4_2_3/v10`` as examples. The post-processing file, ``getTLScrackHist.m``, used to 
generate crack length curve is included in the same folder as the property files.

It is noted that to generate the figure 15 in the paper (fig. 3 in the document), a post-processing file ``MBTcomp.m`` is needed. You can find this file in ``./inputs/itls/section4_2_3/v1``.

.. figure:: _static/fig15.png
   :align: center
   :width: 400 px

   Figure 3: the Fig.15 in the paper
   
Experiment data
-------------------------   
The experimental data files of crack growth curve are stored in ``./expdata``.


Example
+++++++++++++++++++++
To demonstrate a typical DCB simulation, see below

.. raw:: html

   <video controls src="./_static/stable.mp4"></video>


